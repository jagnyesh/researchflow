[pytest]
# Test discovery
testpaths = tests scripts/tests scripts
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Async support
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Output options
addopts =
    -ra
    --strict-markers
    --strict-config
    --showlocals
    --tb=short

# Test suite markers
markers =
    # Test Suites (by functionality/querying method)
    exploratory: Tests for exploratory analytics using SQL-on-FHIR ViewDefinitions
    formal: Tests for formal extraction workflow with direct DB queries
    agents: Tests for AI agents, orchestration, and handoffs
    infrastructure: Tests for infrastructure, UI, and supporting components

    # Test types
    e2e: End-to-end integration tests (slow, requires external services)
    integration: Integration tests (multiple components)
    unit: Unit tests (single component in isolation)
    performance: Performance and benchmarking tests

    # Resource requirements
    slow: Tests that take more than 30 seconds to run
    real_llm: Tests that make real LLM API calls and cost money
    real_db: Tests that require real database (HAPI FHIR or Synthea)
    hapi_db: Tests that specifically require HAPI FHIR database
    synthea_db: Tests that specifically require Synthea database

    # External dependencies
    requires_hapi: Requires HAPI FHIR server running (localhost:8081)
    requires_synthea: Requires Synthea PostgreSQL database
    requires_langsmith: Requires LangSmith tracing configuration
    requires_api_key: Requires ANTHROPIC_API_KEY environment variable

    # Test categories
    sql_on_fhir: Tests for SQL-on-FHIR ViewDefinitions
    workflow: Tests for LangGraph workflow state machine
    approval: Tests for approval workflow
    extraction: Tests for data extraction
    deidentification: Tests for PHI de-identification
    ui: Tests for Streamlit UIs

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::sqlalchemy.exc.MovedIn20Warning

# Coverage
[coverage:run]
source = app
omit =
    */tests/*
    */migrations/*
    */__pycache__/*

[coverage:report]
precision = 2
skip_empty = True
show_missing = True
